from aiogram import Router, F
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import types
from bot import bot
from bot import game_info
from gameinfo import Station, StationStatus
from bot import logging

from .admin_fsm import *
from ..keyboards import *

read_router = Router()


@read_router.message(Command("showteams"))
@read_router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –æ –∫–æ–º–∞–Ω–¥–µ")
async def cmd_show_teams(message: Message):
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")

    if len(game_info.teams) == 0:
        logging.warning(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–æ –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        await message.answer(f"–ü–æ–∫–∞ —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        return
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                         reply_markup=get_team_keyboard())


@read_router.message(lambda msg: msg.text in [team.GetName() for team in game_info.teams])
async def cmd_answer_show_teams(message: Message):
    team_name: str = message.text
    logging.info(
        f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ {team_name}")

    team = game_info.GetTeamByName(team_name)
    if team is None:
        logging.warning(f"–ê–¥–º–∏–Ω—É {message.from_user.id} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ {team_name}")
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        return

    list_answer: list[str] = team.GetToVisitList()
    unpacked_list_answer = ", ".join(list_answer)

    string_ans_representation: str = f"–ö–æ–º–∞–Ω–¥–µ {
        team_name} –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–µ—Ç–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏: {unpacked_list_answer}"

    if len(string_ans_representation) > 0:
        await message.answer(string_ans_representation,
                             reply_markup=get_admin_menu_keyboard())
    else:
        logging.warning(f"–ê–¥–º–∏–Ω—É {message.from_user.id} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ {team_name}")
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@read_router.message(Command("stations"))
@read_router.message(F.text == "–°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–π")
async def cmd_show_stations(message: Message):
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π")

    status_emojis = {
        StationStatus.FREE: "üü¢ –°–≤–æ–±–æ–¥–Ω–∞",
        StationStatus.WAITING: "üü° –û–∂–∏–¥–∞–Ω–∏–µ",
        StationStatus.IN_PROGRESS: "üî¥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    }

    answer_repr = "üìç –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π\n\n"

    for location in game_info.locations:
        answer_repr += f"{location.GetName()}\n"
        for station in location.stations:
            status_text = status_emojis.get(
                station.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            answer_repr += f"- {station.GetName()}: {status_text}\n"
        answer_repr += "\n"

    if len(answer_repr.strip()) > 0:
        logging.info(
            f"–ê–¥–º–∏–Ω—É {message.from_user.id} –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–π")
        await message.answer(answer_repr)
    else:
        logging.warning(f"–ê–¥–º–∏–Ω { message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π, –Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        await message.answer("–ü–æ–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.")


@read_router.message(Command("showstationteams"))
@read_router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏")
async def cmd_show_station_teams(message: Message, state: FSMContext):
    logging.info(
        f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–º–∞–Ω–¥")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:",
                         reply_markup=get_station_selection_keyboard())
    await state.set_state(FSMShowStationTeams.choose_station)


@read_router.message(StateFilter(FSMShowStationTeams.choose_station), F.text)
async def process_station_selected(message: Message, state: FSMContext):
    selected_station_name = message.text
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–±—Ä–∞–ª —Å—Ç–∞–Ω—Ü–∏—é {selected_station_name}")

    station = game_info.GetStationByName(selected_station_name)

    if station is None:
        logging.warning(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏: {selected_station_name}")
        await message.answer("–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏.")
        return

    current_team = game_info.GetCurrentTeamOnStation(selected_station_name)
    leaving_team = game_info.GetLeavingTeamByStation(selected_station_name)

    if current_team is None and leaving_team is None:
        logging.info(
            f"–ù–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {selected_station_name} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        await message.answer(f"–ù–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {selected_station_name} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    else:
        status_messages = []
        if current_team:
            status_messages.append(
                f"–ö–æ–º–∞–Ω–¥–∞ '{current_team.GetName()}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏.")
        if leaving_team:
            status_messages.append(
                f"–ö–æ–º–∞–Ω–¥–∞ '{leaving_team.GetName()}' –ø–æ–∫–∏–¥–∞–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é.")

        logging.info(f"–ê–¥–º–∏–Ω—É {message.from_user.id} –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {selected_station_name}")
        await message.answer("\n".join(status_messages))

    await state.clear()
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                         reply_markup=get_admin_menu_keyboard())


@read_router.message(StateFilter(FSMShowStationTeams.choose_station))
async def warning_invalid_station(message: Message):
    logging.warning(
        f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏")
    await message.answer(
        f'–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n'
        f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.\n\n'
        f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


@read_router.message(F.text == "–ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å—Ç–∞–Ω—Ü–∏–π")
@read_router.message(Command("find_teams_without_station"))
async def find_teams_without_station(message: Message):
    teams_without_station: set[str] = set()

    for team in game_info.teams:
        if len(team.GetToVisitList()) > 0:
            if not (team.GetName() in game_info.team_on_station.values()) \
                    and not (team.GetName() in game_info.team_leaving_station.values()):
                teams_without_station.add(team.GetName())

    if len(teams_without_station) == 0:
        await message.answer(f"–£ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è", reply_markup=get_admin_menu_keyboard())
        return

    await message.answer(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏\n"
                         f"{list(teams_without_station)}", reply_markup=get_admin_menu_keyboard())
